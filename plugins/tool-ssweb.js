/*

$$$$$$\            $$\                                               
$$  __$$\           $$ |                                              
$$ /  \__|$$\   $$\ $$$$$$$\  $$$$$$$$\  $$$$$$\   $$$$$$\   $$$$$$\  
\$$$$$$\  $$ |  $$ |$$  __$$\ \____$$  |$$  __$$\ $$  __$$\ $$  __$$\ 
 \____$$\ $$ |  $$ |$$ |  $$ |  $$$$ _/ $$$$$$$$ |$$ |  \__|$$ /  $$ |
$$\   $$ |$$ |  $$ |$$ |  $$ | $$  _/   $$   ____|$$ |      $$ |  $$ |
\$$$$$$  |\$$$$$$  |$$$$$$$  |$$$$$$$$\ \$$$$$$$\ $$ |      \$$$$$$  |
 \______/  \______/ \_______/ \________| \_______|\__|       \______/

Project Name : SubZero MD
Creator      : Darrell Mucheri ( Mr Frank OFC )
Repo         : https//github.com/mrfrank-ofc/SUBZERO-MD
Support      : wa.me/18062212660
*/
































































































































































































const axios = require("axios");
const config = require('../config');
const { cmd } = require('../command');

cmd({
  pattern: "ss",
  alias: ["ssweb"],
  react: "üöÄ",
  desc: "Download screenshot of a given link.",
  category: "other",
  use: ".ss <link>",
  filename: __filename,
}, 
async (conn, mek, m, { from, reply, q }) => {
  if (!q) {
    return reply("Please provide a URL to capture a screenshot.");
  }

  try {
    // Fetch the screenshot from the API
    const response = await axios.get(`https://bk9.fun/tools/screenshot?device=tablet&url=${encodeURIComponent(q)}`);
    
    // Check if the response contains a valid screenshot URL
    if (!response.data || !response.data.screenshotUrl) {
      return reply("Failed to capture the screenshot. The API did not return a valid URL.");
    }

    const screenshotUrl = response.data.screenshotUrl;

    // Send the screenshot as an image message
    await conn.sendMessage(from, {
      image: { url: screenshotUrl },
      caption: "*SUBZERO SCREENSHOT WEB*\n\n> *¬© Generated By Subzero ‚≠ê*",
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363304325601080@newsletter',
          newsletterName: "Mr Frank OFC",
          serverMessageId: 143,
        },
      },
    }, { quoted: m });

  } catch (error) {
    console.error("Error:", error); // Log the error for debugging
    reply("Failed to capture the screenshot. Please try again.");
  }
});

*/


// Want My Code ?
// Give Credits To Mr Frank
//wa.me/18062212660

// Thank You Jawad
/*
const axios = require("axios");
const config = require('../config');
const { cmd } = require('../command');

cmd({
  pattern: "ss",
  alias: ["ssweb"],
  react: "üöÄ",
  desc: "Download screenshot of a given link.",
  category: "other",
  use: ".ss <link>",
  filename: __filename,
}, 
async (conn, mek, m, {
  from, l, quoted, body, isCmd, command, args, q, isGroup, sender, 
  senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, 
  groupMetadata, groupName, participants, isItzcp, groupAdmins, 
  isBotAdmins, isAdmins, reply 
}) => {
  if (!q) {
    return reply("Please provide a URL to capture a screenshot.");
  }

  try {
    
    const response = await axios.get(`https://bk9.fun/tools/screenshot?device=tablet&url= ${q}`);
    const screenshotUrl = response.data.screenshotUrl;

    // give credit and use
    const imageMessage = {
      image: { url: screenshotUrl },
      caption: "*SUBZERO SCREENSHOT WEB*\n\n> *¬© Generated By Subzero ‚≠ê*",
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363304325601080@newsletter',
          newsletterName: "Mr Frank OFC",
          serverMessageId: 143,
        },
      },
    };

    await conn.sendMessage(from, imageMessage, { quoted: m });
  } catch (error) {
    console.error(error);
    reply("Failed to capture the screenshot. Please try again.");
  }
});

*/
// Want My Code?
// Give Credita Yahh, Mr Frank
/*
const axios = require("axios");
const config = require('../config');
const { cmd } = require('../command');

cmd({
  pattern: "ss",
  alias: ["ssweb"],
  react: "üöÄ",
  desc: "Download screenshot of a given link.",
  category: "other",
  use: ".ss <link>",
  filename: __filename,
}, 
async (conn, mek, m, {
  from, l, quoted, body, isCmd, command, args, q, isGroup, sender, 
  senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, 
  groupMetadata, groupName, participants, isItzcp, groupAdmins, 
  isBotAdmins, isAdmins, reply 
}) => {
  if (!q) {
    return reply("Please provide a URL to capture a screenshot.");
  }

  try {
    // Remove extra space and encode the URL
    const response = await axios.get(`https://api.davidcyriltech.my.id/ssweb?device=tablet?url=${encodeURIComponent(q)}`);
    
    // Validate the API response
    const screenshotUrl = response.data && response.data.screenshotUrl;
    if (!screenshotUrl) {
      return reply("Failed to capture the screenshot. No screenshot URL received from the API.");
    }

    // Construct the image message
    const imageMessage = {
      image: { url: screenshotUrl },
      caption: "*SUBZERO SCREENSHOT WEB*\n\n> *¬© Generated By Subzero ‚≠ê*",
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363304325601080@newsletter',
          newsletterName: "Mr Frank OFC",
          serverMessageId: 143,
        },
      },
    };

    await conn.sendMessage(from, imageMessage, { quoted: m });
  } catch (error) {
    console.error(error);
    reply("Failed to capture the screenshot. Please try again.");
  }
});
*/
/*const { cmd } = require("../command");
const axios = require("axios");

cmd({
  pattern: "screenshot",
  alias: ["ss", "capture"],
  desc: "Capture a full-page screenshot of a website.",
  category: "utility",
  use: ".screenshot <url>",
  filename: __filename,
}, async (conn, mek, msg, { from, args, reply }) => {
  try {
    const url = args[0];
    if (!url) {
      return reply("‚ùå Please provide a valid URL. Example: `.screenshot https://google.com`");
    }

    // Validate the URL
    if (!url.startsWith("http://") && !url.startsWith("https://")) {
      return reply("‚ùå Invalid URL. Please include 'http://' or 'https://'.");
    }

    // Generate the screenshot URL using Thum.io API
    const screenshotUrl = `https://image.thum.io/get/fullpage/${url}`;

    // Send the screenshot as an image
    await conn.sendMessage(from, {
      image: { url: screenshotUrl },
      caption: `üåê *Website Screenshot*:\n\n${url}`,
    }, { quoted: mek });

  } catch (error) {
    console.error("Error capturing screenshot:", error);
    reply("‚ùå Unable to capture the screenshot. Please check the URL and try again.");
  }
});
*/
